# -*- coding: utf-8 -*-
"""Assignment8_CS_202051211.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FqC1jsilxARi8uHNR5Pi_ncCOSV2uRWE

# Assignment 8

## Glen Quadros

### 202051211
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import math

df = pd.read_csv('/content/weight-height.csv')

df.tail()

"""1. Verify the Central Limit Theorem using the ”Height” feature of the data."""

height_df = df['Height']

height_df.tail()

mean = height_df.mean()
std_dev = height_df.std()

sampling_dist = []
for i in range(1000):
    sample = np.random.choice(height_df, size=30)
    sampling_dist.append(sample.mean())

plt.hist(sampling_dist, bins=50)
plt.xlabel('Sample Means')
plt.ylabel('Frequency')
plt.show()

norm_dist = np.random.normal(mean, std_dev/np.sqrt(30), 1000)
plt.hist(sampling_dist, bins=30)
plt.hist(norm_dist, bins=30, alpha=0.5)
plt.xlabel('Sample Means')
plt.ylabel('Frequency')
plt.show()

"""2. Perform the Bootstrap on ”Height” feature of the data."""

def bootstrap_sample(data):
    return np.random.choice(data, size=len(data))

bootstrap_samples = []
for i in range(1000):
    sample = bootstrap_sample(height_df)
    bootstrap_samples.append(sample)

bootstrap_means = [sample.mean() for sample in bootstrap_samples]

plt.hist(bootstrap_means, bins=50)
plt.xlabel('Bootstrap Means')
plt.ylabel('Frequency')
plt.show()

"""3. Calculate the Confidence Interval of 95 % using sample means derived using Bootstrap"""

lower_bound = np.percentile(bootstrap_means, 2.5)
upper_bound = np.percentile(bootstrap_means, 97.5)
print("95% Confidence Interval: [{:.2f}, {:.2f}]".format(lower_bound, upper_bound))